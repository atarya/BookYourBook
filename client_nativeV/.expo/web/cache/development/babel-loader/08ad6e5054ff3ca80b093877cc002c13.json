{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"label\", \"icon\", \"isPassword\", \"hidePassword\", \"setHidePassword\", \"isDate\", \"showDatePicker\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Formik } from 'formik';\nimport { StyledContainer, InnerContainer, PageLogo, PageTitle, SubTitle, StyledFormArea, LeftIcon, StyledInputLabel, StyledTextInput, RightIcon, StyledButton, ButtonText, Colors, MsgBox, Line, ExtraView, ExtraText, TextLink, TextLinkContent } from \"./../components/styles\";\nimport { Octicons, Ionicons, Fontisto } from '@expo/vector-icons';\nvar brand = Colors.brand,\n    darkLight = Colors.darkLight,\n    primary = Colors.primary;\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SignUp = function SignUp() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      hidePassword = _useState2[0],\n      setHidePassword = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      show = _useState4[0],\n      setShow = _useState4[1];\n\n  var _useState5 = useState(new Date(2000, 0, 1)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      date = _useState6[0],\n      setDate = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dob = _useState8[0],\n      setDob = _useState8[1];\n\n  var onChange = function onChange(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    setShow(false);\n    setDate(currentDate);\n    setDob(currentDate);\n  };\n\n  var showDatePicker = function showDatePicker() {\n    setShow(true);\n  };\n\n  return _jsxs(StyledContainer, {\n    children: [_jsx(StatusBar, {\n      style: \"dark\"\n    }), _jsxs(InnerContainer, {\n      children: [_jsx(PageTitle, {\n        children: \"Book Your Book\"\n      }), _jsx(SubTitle, {\n        children: \"Account SignUp\"\n      }), show && _jsx(DateTimePicker, {\n        testID: \"dateTimePicker\",\n        value: date,\n        mode: \"date\",\n        is24Hour: true,\n        display: \"default\",\n        onChange: onChange\n      }), _jsx(Formik, {\n        initialValues: {\n          fullName: '',\n          email: '',\n          dateOfBirth: '',\n          password: '',\n          confirmPassword: ''\n        },\n        onSubmit: function onSubmit(values) {\n          console.log(values);\n        },\n        children: function children(_ref) {\n          var handleChange = _ref.handleChange,\n              handleBlur = _ref.handleBlur,\n              handleSubmit = _ref.handleSubmit,\n              values = _ref.values;\n          return _jsxs(StyledFormArea, {\n            children: [_jsx(MyTextInput, {\n              label: \"Full Name\",\n              icon: \"person\",\n              placeholder: \"Sai Kiran Konka\",\n              placeholderTextColor: darkLight,\n              onChangeText: handleChange('fullName'),\n              onBlur: handleBlur('fullName'),\n              value: values.fullName\n            }), _jsx(MyTextInput, {\n              label: \"Email Address\",\n              icon: \"mail\",\n              placeholder: \"john@example.com\",\n              placeholderTextColor: darkLight,\n              onChangeText: handleChange('email'),\n              onBlur: handleBlur('email'),\n              value: values.email,\n              keyboardType: \"email-address\"\n            }), _jsx(MyTextInput, {\n              label: \"Date of Birth\",\n              icon: \"calendar\",\n              placeholder: \"YYYY - MM - DD\",\n              placeholderTextColor: darkLight,\n              onChangeText: handleChange('dateOfBirth'),\n              onBlur: handleBlur('dateOfBirth'),\n              value: dob ? dob.toDateString() : '',\n              isDate: true,\n              editable: true,\n              showDatePicker: showDatePicker\n            }), _jsx(MyTextInput, {\n              label: \"Password\",\n              icon: \"lock\",\n              placeholder: \"* * * * *\",\n              placeholderTextColor: darkLight,\n              onChangeText: handleChange('password'),\n              onBlur: handleBlur('password'),\n              value: values.password,\n              secureTextEntry: hidePassword,\n              isPassword: true,\n              hidePassword: hidePassword,\n              setHidePassword: setHidePassword\n            }), _jsx(MyTextInput, {\n              label: \"Confirm Password\",\n              icon: \"lock\",\n              placeholder: \"* * * * *\",\n              placeholderTextColor: darkLight,\n              onChangeText: handleChange('confirmPassword'),\n              onBlur: handleBlur('confirmPassword'),\n              value: values.confirmPassword,\n              secureTextEntry: hidePassword,\n              isPassword: true,\n              hidePassword: hidePassword,\n              setHidePassword: setHidePassword\n            }), _jsx(MsgBox, {\n              children: \"...\"\n            }), _jsx(StyledButton, {\n              onPress: handleSubmit,\n              children: _jsx(ButtonText, {\n                children: \"SignUp\"\n              })\n            }), _jsx(Line, {}), _jsxs(ExtraView, {\n              children: [_jsx(ExtraText, {\n                children: \"Already have an account?\"\n              }), _jsx(TextLink, {\n                children: _jsx(TextLinkContent, {\n                  children: \"Login\"\n                })\n              })]\n            })]\n          });\n        }\n      })]\n    })]\n  });\n};\n\nvar MyTextInput = function MyTextInput(_ref2) {\n  var label = _ref2.label,\n      icon = _ref2.icon,\n      isPassword = _ref2.isPassword,\n      hidePassword = _ref2.hidePassword,\n      setHidePassword = _ref2.setHidePassword,\n      isDate = _ref2.isDate,\n      showDatePicker = _ref2.showDatePicker,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  return _jsxs(View, {\n    children: [_jsx(LeftIcon, {\n      children: _jsx(Octicons, {\n        name: icon,\n        size: 30,\n        color: brand\n      })\n    }), _jsx(StyledInputLabel, {\n      children: label\n    }), !isDate && _jsx(StyledTextInput, _objectSpread({}, props)), isDate && _jsx(TouchableOpacity, {\n      onPress: showDatePicker,\n      children: _jsx(StyledTextInput, _objectSpread({}, props))\n    }), isPassword && _jsx(RightIcon, {\n      onPress: function onPress() {\n        setHidePassword(!hidePassword);\n      },\n      children: _jsx(Ionicons, {\n        name: hidePassword ? 'md-eye-off' : 'md-eye',\n        size: 30,\n        color: darkLight\n      })\n    })]\n  });\n};\n\nexport default SignUp;","map":{"version":3,"sources":["C:/Users/Dell/Downloads/Native-login-SignUp-main/screens/Signup.js"],"names":["React","useState","StatusBar","Formik","StyledContainer","InnerContainer","PageLogo","PageTitle","SubTitle","StyledFormArea","LeftIcon","StyledInputLabel","StyledTextInput","RightIcon","StyledButton","ButtonText","Colors","MsgBox","Line","ExtraView","ExtraText","TextLink","TextLinkContent","Octicons","Ionicons","Fontisto","brand","darkLight","primary","DateTimePicker","SignUp","hidePassword","setHidePassword","show","setShow","Date","date","setDate","dob","setDob","onChange","event","selectedDate","currentDate","showDatePicker","fullName","email","dateOfBirth","password","confirmPassword","values","console","log","handleChange","handleBlur","handleSubmit","toDateString","MyTextInput","label","icon","isPassword","isDate","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\n\nimport { View, TouchableOpacity } from 'react-native';\n\n// formik\nimport { Formik } from 'formik';\n\nimport {\n  StyledContainer,\n  InnerContainer,\n  PageLogo,\n  PageTitle,\n  SubTitle,\n  StyledFormArea,\n  LeftIcon,\n  StyledInputLabel,\n  StyledTextInput,\n  RightIcon,\n  StyledButton,\n  ButtonText,\n  Colors,\n  MsgBox,\n  Line,\n  ExtraView,\n  ExtraText,\n  TextLink,\n  TextLinkContent,\n} from './../components/styles';\n\n// icons\nimport { Octicons, Ionicons, Fontisto } from '@expo/vector-icons';\n\n// colors\nconst { brand, darkLight, primary } = Colors;\n\n// DateTime Picker\nimport DateTimePicker from '@react-native-community/datetimepicker';\n\nconst SignUp = () => {\n  const [hidePassword, setHidePassword] = useState(true);\n  const [show, setShow] = useState(false);\n  const [date, setDate] = useState(new Date(2000, 0, 1));\n\n  // actual date of birth to be sent\n  const [dob, setDob] = useState();\n\n  const onChange = (event, selectedDate) => {\n    const currentDate = selectedDate || date;\n    setShow(false);\n    setDate(currentDate);\n    setDob(currentDate);\n  };\n\n  const showDatePicker = () => {\n    setShow(true);\n  };\n\n  return (\n    <StyledContainer>\n      <StatusBar style=\"dark\" />\n      <InnerContainer>\n        <PageTitle>Book Your Book</PageTitle>\n        <SubTitle>Account SignUp</SubTitle>\n\n        {show && (\n          <DateTimePicker testID=\"dateTimePicker\" value={date} mode='date' is24Hour={true} display= \"default\" onChange={onChange} />\n        )}\n\n        <Formik\n          initialValues={{ fullName: '', email: '', dateOfBirth: '', password: '', confirmPassword: '' }}\n          onSubmit={(values) => {\n            console.log(values);\n          }}\n        >\n          {({ handleChange, handleBlur, handleSubmit, values }) => (\n            <StyledFormArea>\n              <MyTextInput\n                label=\"Full Name\"\n                icon=\"person\"\n                placeholder=\"Sai Kiran Konka\"\n                placeholderTextColor={darkLight}\n                onChangeText={handleChange('fullName')}\n                onBlur={handleBlur('fullName')}\n                value={values.fullName}\n              />\n\n              <MyTextInput\n                label=\"Email Address\"\n                icon=\"mail\"\n                placeholder=\"john@example.com\"\n                placeholderTextColor={darkLight}\n                onChangeText={handleChange('email')}\n                onBlur={handleBlur('email')}\n                value={values.email}\n                keyboardType=\"email-address\"\n              />\n\n              <MyTextInput\n                label=\"Date of Birth\"\n                icon=\"calendar\"\n                placeholder=\"YYYY - MM - DD\"\n                placeholderTextColor={darkLight}\n                onChangeText={handleChange('dateOfBirth')}\n                onBlur={handleBlur('dateOfBirth')}\n                value={dob ? dob.toDateString() : ''}\n                isDate={true}\n                editable={true}\n                showDatePicker={showDatePicker}\n              />\n\n              <MyTextInput\n                label=\"Password\"\n                icon=\"lock\"\n                placeholder=\"* * * * *\"\n                placeholderTextColor={darkLight}\n                onChangeText={handleChange('password')}\n                onBlur={handleBlur('password')}\n                value={values.password}\n                secureTextEntry={hidePassword}\n                isPassword={true}\n                hidePassword={hidePassword}\n                setHidePassword={setHidePassword}\n              />\n\n              <MyTextInput\n                label=\"Confirm Password\"\n                icon=\"lock\"\n                placeholder=\"* * * * *\"\n                placeholderTextColor={darkLight}\n                onChangeText={handleChange('confirmPassword')}\n                onBlur={handleBlur('confirmPassword')}\n                value={values.confirmPassword}\n                secureTextEntry={hidePassword}\n                isPassword={true}\n                hidePassword={hidePassword}\n                setHidePassword={setHidePassword}\n              />\n\n              <MsgBox>...</MsgBox>\n              <StyledButton onPress={handleSubmit}>\n                <ButtonText>SignUp</ButtonText>\n              </StyledButton>\n              <Line />\n              <ExtraView>\n                <ExtraText>Already have an account?</ExtraText>\n                <TextLink>\n                  <TextLinkContent>Login</TextLinkContent>\n                </TextLink>\n              </ExtraView>\n            </StyledFormArea>\n          )}\n        </Formik>\n      </InnerContainer>\n    </StyledContainer>\n  );\n};\n\nconst MyTextInput = ({ label, icon, isPassword, hidePassword, setHidePassword, isDate, showDatePicker, ...props }) => {\n  return (\n    <View>\n      <LeftIcon>\n        <Octicons name={icon} size={30} color={brand} />\n      </LeftIcon>\n      <StyledInputLabel>{label}</StyledInputLabel>\n      {!isDate && <StyledTextInput {...props} />}\n      {isDate && (\n        <TouchableOpacity onPress={showDatePicker}>\n          <StyledTextInput {...props} />\n        </TouchableOpacity>\n      )}\n\n      {isPassword && (\n        <RightIcon\n          onPress={() => {\n            setHidePassword(!hidePassword);\n          }}\n        >\n          <Ionicons name={hidePassword ? 'md-eye-off' : 'md-eye'} size={30} color={darkLight} />\n        </RightIcon>\n      )}\n    </View>\n  );\n};\n\nexport default SignUp;\n"]},"metadata":{},"sourceType":"module"}