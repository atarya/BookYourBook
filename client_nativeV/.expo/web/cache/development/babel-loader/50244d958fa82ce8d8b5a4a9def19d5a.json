{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"label\", \"icon\", \"isPassword\", \"hidePassword\", \"setHidePassword\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport View from \"react-native-web/dist/exports/View\";\nimport { Formik } from 'formik';\nimport { StyledContainer, InnerContainer, PageLogo, PageTitle, SubTitle, StyledFormArea, LeftIcon, StyledInputLabel, StyledTextInput, RightIcon, StyledButton, ButtonText, Colors, MsgBox, Line, ExtraView, ExtraText, TextLink, TextLinkContent } from \"./../components/styles\";\nimport { Octicons, Ionicons, Fontisto } from '@expo/vector-icons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar brand = Colors.brand,\n    darkLight = Colors.darkLight,\n    primary = Colors.primary;\n\nvar Login = function Login() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      hidePassword = _useState2[0],\n      setHidePassword = _useState2[1];\n\n  return _jsxs(StyledContainer, {\n    children: [_jsx(StatusBar, {\n      style: \"dark\"\n    }), _jsxs(InnerContainer, {\n      children: [_jsx(PageTitle, {\n        children: \"Sign In\"\n      }), _jsx(Formik, {\n        initialValues: {\n          mobile: '',\n          password: ''\n        },\n        onSubmit: function onSubmit(values) {\n          console.log(values);\n        },\n        children: function children(_ref) {\n          var handleChange = _ref.handleChange,\n              handleBlur = _ref.handleBlur,\n              handleSubmit = _ref.handleSubmit,\n              values = _ref.values;\n          return _jsxs(StyledFormArea, {\n            children: [_jsx(MyTextInput, {\n              label: \"Mobile Number\",\n              icon: \"mob\",\n              placeholder: \"9876543210\",\n              placeholderTextColor: darkLight,\n              onChangeText: handleChange('email'),\n              onBlur: handleBlur('email'),\n              value: values.email,\n              keyboardType: \"email-address\"\n            }), _jsx(MyTextInput, {\n              label: \"Password\",\n              icon: \"lock\",\n              placeholder: \"* * * * *\",\n              placeholderTextColor: darkLight,\n              onChangeText: handleChange('password'),\n              onBlur: handleBlur('password'),\n              value: values.password,\n              secureTextEntry: hidePassword,\n              isPassword: true,\n              hidePassword: hidePassword,\n              setHidePassword: setHidePassword\n            }), _jsx(MsgBox, {\n              children: \"...\"\n            }), _jsx(StyledButton, {\n              onPress: handleSubmit,\n              children: _jsx(ButtonText, {\n                children: \"LOGIN\"\n              })\n            }), _jsx(Line, {}), _jsxs(StyledButton, {\n              google: true,\n              onPress: handleSubmit,\n              children: [_jsx(Fontisto, {\n                name: \"google\",\n                color: primary,\n                size: 25\n              }), _jsx(ButtonText, {\n                google: true,\n                children: \"SIGN IN with Google\"\n              })]\n            }), _jsxs(ExtraView, {\n              children: [_jsx(ExtraText, {\n                children: \"Don't have an account already?\"\n              }), _jsx(TextLink, {\n                children: _jsx(TextLinkContent, {\n                  children: \"Sign Up\"\n                })\n              })]\n            })]\n          });\n        }\n      })]\n    })]\n  });\n};\n\nvar MyTextInput = function MyTextInput(_ref2) {\n  var label = _ref2.label,\n      icon = _ref2.icon,\n      isPassword = _ref2.isPassword,\n      hidePassword = _ref2.hidePassword,\n      setHidePassword = _ref2.setHidePassword,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  return _jsxs(View, {\n    children: [_jsx(LeftIcon, {\n      children: _jsx(Octicons, {\n        name: icon,\n        size: 30,\n        color: brand\n      })\n    }), _jsx(StyledInputLabel, {\n      children: label\n    }), _jsx(StyledTextInput, _objectSpread({}, props)), isPassword && _jsx(RightIcon, {\n      onPress: function onPress() {\n        setHidePassword(!hidePassword);\n      },\n      children: _jsx(Ionicons, {\n        name: hidePassword ? 'md-eye-off' : 'md-eye',\n        size: 30,\n        color: darkLight\n      })\n    })]\n  });\n};\n\nexport default Login;","map":{"version":3,"sources":["C:/Users/Dell/Downloads/Native-login-SignUp-main/screens/Login.js"],"names":["React","useState","StatusBar","Formik","StyledContainer","InnerContainer","PageLogo","PageTitle","SubTitle","StyledFormArea","LeftIcon","StyledInputLabel","StyledTextInput","RightIcon","StyledButton","ButtonText","Colors","MsgBox","Line","ExtraView","ExtraText","TextLink","TextLinkContent","Octicons","Ionicons","Fontisto","brand","darkLight","primary","Login","hidePassword","setHidePassword","mobile","password","values","console","log","handleChange","handleBlur","handleSubmit","email","MyTextInput","label","icon","isPassword","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\n\nimport { View } from 'react-native';\n\n// formik\nimport { Formik } from 'formik';\n\nimport {\n  StyledContainer,\n  InnerContainer,\n  PageLogo,\n  PageTitle,\n  SubTitle,\n  StyledFormArea,\n  LeftIcon,\n  StyledInputLabel,\n  StyledTextInput,\n  RightIcon,\n  StyledButton,\n  ButtonText,\n  Colors,\n  MsgBox,\n  Line,\n  ExtraView,\n  ExtraText,\n  TextLink,\n  TextLinkContent\n} from './../components/styles';\n\n// icons\nimport { Octicons, Ionicons, Fontisto } from '@expo/vector-icons';\n\n// colors\nconst { brand, darkLight, primary } = Colors;\n\nconst Login = () => {\n  const [hidePassword, setHidePassword] = useState(true);\n\n  return (\n    <StyledContainer>\n      <StatusBar style=\"dark\" />\n      <InnerContainer>\n        {/* <PageLogo resizeMode=\"cover\" source={require('./../assets/img/img1.jpg')} /> */}\n        <PageTitle>Sign In</PageTitle>\n        {/* <SubTitle>Account Login</SubTitle> */}\n\n        <Formik\n          initialValues={{ mobile: '', password: '' }}\n          onSubmit={(values) => {\n            console.log(values);\n          }}\n        >\n          {({ handleChange, handleBlur, handleSubmit, values }) => (\n            <StyledFormArea>\n              <MyTextInput\n                label=\"Mobile Number\"\n                icon=\"mob\"\n                placeholder=\"9876543210\"\n                placeholderTextColor={darkLight}\n                onChangeText={handleChange('email')}\n                onBlur={handleBlur('email')}\n                value={values.email}\n                keyboardType=\"email-address\"\n              />\n\n              <MyTextInput\n                label=\"Password\"\n                icon=\"lock\"\n                placeholder=\"* * * * *\"\n                placeholderTextColor={darkLight}\n                onChangeText={handleChange('password')}\n                onBlur={handleBlur('password')}\n                value={values.password}\n                secureTextEntry={hidePassword}\n                isPassword={true}\n                hidePassword={hidePassword}\n                setHidePassword={setHidePassword}\n              />\n              <MsgBox>...</MsgBox>\n              <StyledButton onPress={handleSubmit}>\n                <ButtonText>LOGIN</ButtonText>\n              </StyledButton>\n              <Line />\n              <StyledButton google={true} onPress={handleSubmit}>\n                <Fontisto name=\"google\" color={primary} size={25} />\n                <ButtonText google={true}>SIGN IN with Google</ButtonText>\n              </StyledButton>\n              <ExtraView>\n                <ExtraText>Don't have an account already?</ExtraText>\n                <TextLink>\n                  <TextLinkContent>Sign Up</TextLinkContent>\n                </TextLink>\n              </ExtraView>\n            </StyledFormArea>\n          )}\n        </Formik>\n      </InnerContainer>\n    </StyledContainer>\n  );\n};\n\nconst MyTextInput = ({ label, icon, isPassword, hidePassword, setHidePassword, ...props }) => {\n  return (\n    <View>\n      <LeftIcon>\n        <Octicons name={icon} size={30} color={brand} />\n      </LeftIcon>\n      <StyledInputLabel>{label}</StyledInputLabel>\n      <StyledTextInput {...props} />\n      {isPassword && (\n        <RightIcon\n          onPress={() => {\n            setHidePassword(!hidePassword);\n          }}\n        >\n          <Ionicons name={hidePassword ? 'md-eye-off' : 'md-eye'} size={30} color={darkLight} />\n        </RightIcon>\n      )}\n    </View>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}