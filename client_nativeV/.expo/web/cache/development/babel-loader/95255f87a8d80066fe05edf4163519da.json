{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"label\", \"icon\", \"isPassword\", \"hidePassword\", \"setHidePassword\", \"isDate\", \"showDatePicker\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Formik } from 'formik';\nimport { StyledContainer, InnerContainer, PageLogo, PageTitle, SubTitle, StyledFormArea, LeftIcon, StyledInputLabel, StyledTextInput, RightIcon, StyledButton, ButtonText, Colors, MsgBox, Line, ExtraView, ExtraText, TextLink, TextLinkContent } from \"./../components/styles\";\nimport { Octicons, Ionicons, Fontisto } from '@expo/vector-icons';\nvar brand = Colors.brand,\n    darkLight = Colors.darkLight,\n    primary = Colors.primary;\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SignUp = function SignUp() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      hidePassword = _useState2[0],\n      setHidePassword = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      show = _useState4[0],\n      setShow = _useState4[1];\n\n  var _useState5 = useState(new Date(2000, 0, 1)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      date = _useState6[0],\n      setDate = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dob = _useState8[0],\n      setDob = _useState8[1];\n\n  var onChange = function onChange(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    setShow(false);\n    setDate(currentDate);\n    setDob(currentDate);\n  };\n\n  var showDatePicker = function showDatePicker() {\n    setShow(true);\n  };\n\n  return _jsxs(StyledContainer, {\n    children: [_jsx(StatusBar, {\n      style: \"dark\"\n    }), _jsxs(InnerContainer, {\n      children: [_jsx(PageTitle, {\n        children: \"Verify Yourself\"\n      }), _jsx(SubTitle, {\n        children: \"Mobile Verification\"\n      }), show && _jsx(DateTimePicker, {\n        testID: \"dateTimePicker\",\n        value: date,\n        mode: \"date\",\n        is24Hour: true,\n        display: \"default\",\n        onChange: onChange\n      }), _jsx(Formik, {\n        initialValues: {\n          fullName: '',\n          email: '',\n          dateOfBirth: '',\n          password: '',\n          confirmPassword: ''\n        },\n        onSubmit: function onSubmit(values) {\n          console.log(values);\n        },\n        children: function children(_ref) {\n          var handleChange = _ref.handleChange,\n              handleBlur = _ref.handleBlur,\n              handleSubmit = _ref.handleSubmit,\n              values = _ref.values;\n          return _jsxs(StyledFormArea, {\n            children: [_jsx(MyTextInput, {\n              label: \"OTP\",\n              icon: \"lock\",\n              placeholder: \"* * * * *\",\n              placeholderTextColor: darkLight,\n              onChangeText: handleChange('password'),\n              onBlur: handleBlur('password'),\n              value: values.password,\n              secureTextEntry: hidePassword,\n              isPassword: true,\n              hidePassword: hidePassword,\n              setHidePassword: setHidePassword\n            }), _jsx(MsgBox, {\n              children: \"...\"\n            }), _jsx(StyledButton, {\n              onPress: handleSubmit,\n              children: _jsx(ButtonText, {\n                children: \"Verify OTP\"\n              })\n            }), _jsx(Line, {}), _jsx(ExtraView, {\n              children: _jsx(TextLink, {\n                children: _jsx(TextLinkContent, {\n                  children: \"Resend OTP\"\n                })\n              })\n            })]\n          });\n        }\n      })]\n    })]\n  });\n};\n\nvar MyTextInput = function MyTextInput(_ref2) {\n  var label = _ref2.label,\n      icon = _ref2.icon,\n      isPassword = _ref2.isPassword,\n      hidePassword = _ref2.hidePassword,\n      setHidePassword = _ref2.setHidePassword,\n      isDate = _ref2.isDate,\n      showDatePicker = _ref2.showDatePicker,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  return _jsxs(View, {\n    children: [_jsx(LeftIcon, {\n      children: _jsx(Octicons, {\n        name: icon,\n        size: 30,\n        color: brand\n      })\n    }), _jsx(StyledInputLabel, {\n      children: label\n    }), !isDate && _jsx(StyledTextInput, _objectSpread({}, props)), isDate && _jsx(TouchableOpacity, {\n      onPress: showDatePicker,\n      children: _jsx(StyledTextInput, _objectSpread({}, props))\n    }), isPassword && _jsx(RightIcon, {\n      onPress: function onPress() {\n        setHidePassword(!hidePassword);\n      },\n      children: _jsx(Ionicons, {\n        name: hidePassword ? 'md-eye-off' : 'md-eye',\n        size: 30,\n        color: darkLight\n      })\n    })]\n  });\n};\n\nexport default SignUp;","map":{"version":3,"sources":["D:/Capstone Deeds/CAPSTONE GIT MAIN/BookYourBook/client_nativeV/screens/MobVerify.js"],"names":["React","useState","StatusBar","Formik","StyledContainer","InnerContainer","PageLogo","PageTitle","SubTitle","StyledFormArea","LeftIcon","StyledInputLabel","StyledTextInput","RightIcon","StyledButton","ButtonText","Colors","MsgBox","Line","ExtraView","ExtraText","TextLink","TextLinkContent","Octicons","Ionicons","Fontisto","brand","darkLight","primary","DateTimePicker","SignUp","hidePassword","setHidePassword","show","setShow","Date","date","setDate","dob","setDob","onChange","event","selectedDate","currentDate","showDatePicker","fullName","email","dateOfBirth","password","confirmPassword","values","console","log","handleChange","handleBlur","handleSubmit","MyTextInput","label","icon","isPassword","isDate","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { StatusBar } from 'expo-status-bar';\r\n\r\nimport { View, TouchableOpacity } from 'react-native';\r\n\r\n// formik\r\nimport { Formik } from 'formik';\r\n\r\nimport {\r\n    StyledContainer,\r\n    InnerContainer,\r\n    PageLogo,\r\n    PageTitle,\r\n    SubTitle,\r\n    StyledFormArea,\r\n    LeftIcon,\r\n    StyledInputLabel,\r\n    StyledTextInput,\r\n    RightIcon,\r\n    StyledButton,\r\n    ButtonText,\r\n    Colors,\r\n    MsgBox,\r\n    Line,\r\n    ExtraView,\r\n    ExtraText,\r\n    TextLink,\r\n    TextLinkContent,\r\n} from './../components/styles';\r\n\r\n// icons\r\nimport { Octicons, Ionicons, Fontisto } from '@expo/vector-icons';\r\n\r\n// colors\r\nconst { brand, darkLight, primary } = Colors;\r\n\r\n// DateTime Picker\r\nimport DateTimePicker from '@react-native-community/datetimepicker';\r\n\r\nconst SignUp = () => {\r\n    const [hidePassword, setHidePassword] = useState(true);\r\n    const [show, setShow] = useState(false);\r\n    const [date, setDate] = useState(new Date(2000, 0, 1));\r\n\r\n    // actual date of birth to be sent\r\n    const [dob, setDob] = useState();\r\n\r\n    const onChange = (event, selectedDate) => {\r\n        const currentDate = selectedDate || date;\r\n        setShow(false);\r\n        setDate(currentDate);\r\n        setDob(currentDate);\r\n    };\r\n\r\n    const showDatePicker = () => {\r\n        setShow(true);\r\n    };\r\n\r\n    return (\r\n        <StyledContainer>\r\n            <StatusBar style=\"dark\" />\r\n            <InnerContainer>\r\n                <PageTitle>Verify Yourself</PageTitle>\r\n                <SubTitle>Mobile Verification</SubTitle>\r\n\r\n                {show && (\r\n                    <DateTimePicker testID=\"dateTimePicker\" value={date} mode='date' is24Hour={true} display=\"default\" onChange={onChange} />\r\n                )}\r\n\r\n                <Formik\r\n                    initialValues={{ fullName: '', email: '', dateOfBirth: '', password: '', confirmPassword: '' }}\r\n                    onSubmit={(values) => {\r\n                        console.log(values);\r\n                    }}\r\n                >\r\n                    {({ handleChange, handleBlur, handleSubmit, values }) => (\r\n                        <StyledFormArea>\r\n\r\n\r\n                            <MyTextInput\r\n                                label=\"OTP\"\r\n                                icon=\"lock\"\r\n                                placeholder=\"* * * * *\"\r\n                                placeholderTextColor={darkLight}\r\n                                onChangeText={handleChange('password')}\r\n                                onBlur={handleBlur('password')}\r\n                                value={values.password}\r\n                                secureTextEntry={hidePassword}\r\n                                isPassword={true}\r\n                                hidePassword={hidePassword}\r\n                                setHidePassword={setHidePassword}\r\n                            />\r\n\r\n\r\n                            <MsgBox>...</MsgBox>\r\n                            <StyledButton onPress={handleSubmit}>\r\n                                <ButtonText>Verify OTP</ButtonText>\r\n                            </StyledButton>\r\n                            <Line />\r\n                            <ExtraView>\r\n\r\n                                <TextLink>\r\n                                    <TextLinkContent>Resend OTP</TextLinkContent>\r\n                                </TextLink>\r\n                            </ExtraView>\r\n                        </StyledFormArea>\r\n                    )}\r\n                </Formik>\r\n            </InnerContainer>\r\n        </StyledContainer>\r\n    );\r\n};\r\n\r\nconst MyTextInput = ({ label, icon, isPassword, hidePassword, setHidePassword, isDate, showDatePicker, ...props }) => {\r\n    return (\r\n        <View>\r\n            <LeftIcon>\r\n                <Octicons name={icon} size={30} color={brand} />\r\n            </LeftIcon>\r\n            <StyledInputLabel>{label}</StyledInputLabel>\r\n            {!isDate && <StyledTextInput {...props} />}\r\n            {isDate && (\r\n                <TouchableOpacity onPress={showDatePicker}>\r\n                    <StyledTextInput {...props} />\r\n                </TouchableOpacity>\r\n            )}\r\n\r\n            {isPassword && (\r\n                <RightIcon\r\n                    onPress={() => {\r\n                        setHidePassword(!hidePassword);\r\n                    }}\r\n                >\r\n                    <Ionicons name={hidePassword ? 'md-eye-off' : 'md-eye'} size={30} color={darkLight} />\r\n                </RightIcon>\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default SignUp;\r\n"]},"metadata":{},"sourceType":"module"}